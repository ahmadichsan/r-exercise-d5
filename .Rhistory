# 2. a must not equal zero
# for this case, assumed that the rule number 1 always fulfill. So, we have to handle rule number 2.
if (a == 0) {
return ('Oops, this is not a quadratic equation, but a linear equation. So, No Solution.')
}
# eq to find roots of a quadratic formula is as follow:
# x = (-b ± √b^2 - 4*a*c) / (2a*a)
# the part √b^2 - 4*a*c is called a discriminant.
# discriminant has three cases:
# a. if discriminant > zero. This means there would be 2 distinct solutions for x (or x-intercepts).
# b. if discriminant = zero. This means there would be one value for x.
# c. if discriminant < zero. This means the square root of a negative value is undefined.
# There would be no real-numbered values for x.
discriminant = (b^2) - (4*a*c)
if (discriminant < 0) {
return ('No Solution')
}
if (discriminant == 0) {
x <- (-b) / (2*a)
return (paste("X =", x))
}
# case if discriminant > 0
positiveX <- (-b + sqrt(discriminant)) / (2*a)
negativeX <- (-b - sqrt(discriminant)) / (2*a)
return (paste0("X1 = ", positiveX, ", ", "X2 = ", negativeX))
}
sample1 = squareRoot(1, -5, 6) # Output: 'X1 = 3, X2 = 2'.
print(sample1)
sample2 = squareRoot(2, 4, 2) # Output; 'X = -1'.
print(sample2)
sample3 = squareRoot(1, 1, 9) # Output: 'No solution'.
print(sample3)
sample4 = squareRoot(0, 1, 2) # Output: 'Oops, this is not a quadratic equation, but a linear equation. So, No Solution.'.
print(sample4)
}
questionTwo()
# Question 3
questionThree = function() {
distance = function(point1, point2) {
q1 = point1[1]
q2 = point1[2]
p1 = point2[1]
p2 = point2[2]
result = sqrt((q1 - p1)^2 + (q2 - p2)^2)
return (paste("The distance is", result))
}
sample1 = distance(c(5, 5), c(1, 2)) # Output: "The distance is 5"
print(sample1)
sample2 = distance(c(0, -1), c(-3, 2)) # Output: "The distance is 4.242640487"
print(sample2)
}
questionThree()
set.seed(1234)
my_data <- data.frame(name = paste0(rep("M_", 10), 1:10), weight = round(rnorm(10, 20, 2), 1))
my_data
my_data
m_mean = mean(my_data)
m_mean = mean(my_data$weight)
m_mean
m_median = median(my_data$weight)
m_median
boxplot(my_data)
boxplot(my_data$weight)
hist(my_data$weight)
View(my_data)
View(order(my_data))
View(my_data[order(my_data$weight),])
boxplot(my_data$weight)
hist(my_data$weight)
View(my_data[order(my_data$weight),])
View(my_data)
# find the mean => 19.25
m_mean = mean(my_data$weight)
# find the median => 18.9
m_median = median(my_data$weight)
# visualize using boxplot
boxplot(my_data$weight)
# visualize using histogram
hist(my_data$weight)
# visualize using histogram
hist(my_data$weight,
main = "Mouse Weight Distribution"
)
# visualize using histogram
hist(my_data$weight,
main = "Mouse Weight Distribution",
xlab = "Weight"
)
# visualize using histogram
hist(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Weight"
)
# visualize using histogram
hist(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight"
)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
)
weight
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
)
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
)
set.seed(1234)
my_data <- data.frame(name = paste0(rep("M_", 10), 1:10), weight = round(rnorm(10, 20, 2), 1))
# find the mean => 19.25
m_mean = mean(my_data$weight)
# find the median => 18.9
m_median = median(my_data$weight)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
)
# visualize using boxplot
boxplot(my_data$weight,
main = 'Weight Distribution of 10 Mouses Sample',
xlab = 'Mouse Weight',
)
boxplot(my_data$weight,
main = 'Weight Distribution of 10 Mouses Sample',
xlab = 'Mouse Weight',
)
# visualize using boxplot
boxplot(my_data$weight)
# visualize using boxplot
boxplot(my_data$weight,
main = 'Weight Distribution of 10 Mouses Sample',
xlab = 'Mouse Weight',
horizontal = FALSE,
)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution Mouses Sample",
xlab = 'Mouse Weight',
horizontal = FALSE,
)
# visualize using boxplot
boxplot(my_data$weight, main = "Weight Distribution Mouses Sample", xlab = "Mouse Weight", horizontal = FALSE)
# visualize using boxplot
boxplot(my_data$weight, main = "Weight Distribution of 10 Mouses Sample", xlab = "Mouse Weight", horizontal = FALSE)
# visualize using boxplot
boxplot(my_data$weight, main = "Weight Distribution of 10 Mouses Sample", xlab = "Mouse Weight", horizontal = TRUE)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample", xlab = "Mouse Weight", horizontal = TRUE)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight", horizontal = TRUE)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE
)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE
)
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE
)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE
)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE,
notch = FALSE,
)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE,
notch = TRUE,
)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE,
notch = TRUE)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE,
notch = TRUE
)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE,
notch = TRUE,
)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE,
notch = TRUE)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE)
# visualize using histogram
hist(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight")
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight",
horizontal = TRUE)
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight (Kg)",
horizontal = TRUE)
# visualize using histogram
hist(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight (Kg)")
# visualize using boxplot
boxplot(my_data$weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight (Kg)",
horizontal = TRUE)
# Interpretation based on boxplot visualization
# 1. Based on the data, after visualized using boxplot, we can conclude that the ten samples of mouse weight is Negatively Skewed
# 2. This means that most of the mouse weight are distributed to the right
# 3. The median of this data is 18.9 and we got 19.25 for the mean, which is bigger (on the right) than the median. This founding support our statement on point 2
# 4. The line inside the box represents the median, which placed around 19 (the actual median is 18.9) on the boxplot visualization
# 5. Is there any outliers? Based on the boxplot, no. But, let's calculate it!
m_q1 = quantile(my_data$weight, 0.25)
m_q1
# Q3 value
m_q3 = quantile(my_data$weight, 0.75)
m_q3
# IQR value
m_iqr = m_q3 - m_q1
m_iqr
IQR(my_data$weight)
# Minimum value to define if the data is outliers or not
min_m_value = m_q1 - (1.5 * m_iqr)
# Maximum value to define if the data is outliers or not => 14.7
max_m_value = m_q3 + (1.5 * m_iqr)
print(min_m_value)
# Now, find the minimum value in our data
min_m_data = min(my_data$weight)
print(min_m_data)
# Now, find the maximum value in our data => 15.3. This means, the minimum data in our dataset is not lower than the minimum value defined as an outliers
max_m_data = max(my_data$weight)
print(max_m_data)
# One sample t-test
m_sd = sd(my_data$weight)
m_sd
# save the data for later use
mouse_weight = my_data$weight
# find the mean => 19.25
m_mean = mean(mouse_weight)
print(m_mean)
# find the median (Q2) => 18.9
m_median = median(mouse_weight)
print(m_median)
# visualize using boxplot
boxplot(mouse_weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight (Kg)",
horizontal = TRUE)
# Interpretation based on boxplot visualization
# 1. Based on the data, after visualized using boxplot, we can conclude that the ten samples of mouse weight is Negatively Skewed
# 2. This means that most of the mouse weight are distributed to the right
# 3. The median of this data is 18.9 and we got 19.25 for the mean, which is bigger (on the right) than the median. This founding support our statement on point 2
# 4. The line inside the box represents the median, which placed around 19 (the actual median is 18.9) on the boxplot visualization
# 5. Is there any outliers? Based on the boxplot, no. But, let's calculate it!
# Q1 value => 18.375
m_q1 = quantile(mouse_weight, 0.25)
print(m_q1)
# Q3 value => 20.825
m_q3 = quantile(mouse_weight, 0.75)
print(m_q3)
# IQR value => 2.45
m_iqr = m_q3 - m_q1
print(m_iqr)
# Minimum value to define if the data is outliers or not => 14.7
min_m_value = m_q1 - (1.5 * m_iqr)
print(min_m_value)
# Now, find the minimum value in our data => 15.3. This means, the minimum data in our dataset is not lower than the minimum value defined as an outliers
min_m_data = min(mouse_weight)
print(min_m_data)
# Maximum value to define if the data is outliers or not => 24.5
max_m_value = m_q3 + (1.5 * m_iqr)
# Now, find the maximum value in our data => 22.2. This means, the maximum data in our dataset is not bigger than the maximum value defined as an outliers
max_m_data = max(mouse_weight)
print(max_m_data)
# visualize using histogram
hist(mouse_weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight (Kg)")
# Find standard deviation in our data => 2.002915
m_sd = sd(mouse_weight)
tTestResult = t.test(mouse_weight, mu = m_mu)
# our mu = 25
m_mu = 25
# Find standard deviation in our data => 2.002915
m_sd = sd(mouse_weight)
tTestResult = t.test(mouse_weight, mu = m_mu)
tTestResult
# Based on above information, we could determined if H0 rejected based on p-value
pValue = tTestResult$p.value
is_mu_rejected = pValue < 0.05
print(is_mu_rejected)
# Another way to determine if H0 rejected or not is by using Statistic Test and t-score
tScore = tTestResult$statistic
# Based on above information, we could determined if H0 rejected based on p-value.
# H0 rejected if pValue less than 0.05. Since our p-value is 7.953e-06, it means our
# p-value is less than 0.05. So, our H0 rejected
p_value = tTestResult$p.value
is_mu_rejected = p_value < 0.05
print(is_mu_rejected)
# Another way to determine if H0 rejected or not is by using Statistic Test and t-score
t_score = tTestResult$statistic
t_test_result = t.test(mouse_weight, mu = m_mu)
set.seed(1234)
my_data = data.frame(name = paste0(rep("M_", 10), 1:10), weight = round(rnorm(10, 20, 2), 1))
# save the data for later use
mouse_weight = my_data$weight
# find the mean => 19.25
m_mean = mean(mouse_weight)
print(m_mean)
# find the median (Q2) => 18.9
m_median = median(mouse_weight)
print(m_median)
# visualize using boxplot
boxplot(mouse_weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight (Kg)",
horizontal = TRUE)
# Interpretation based on boxplot visualization
# 1. Based on the data, after visualized using boxplot, we can conclude that the ten samples of mouse weight is Negatively Skewed
# 2. This means that most of the mouse weight are distributed to the right
# 3. The median of this data is 18.9 and we got 19.25 for the mean, which is bigger (on the right) than the median. This founding support our statement on point 2
# 4. The line inside the box represents the median, which placed around 19 (the actual median is 18.9) on the boxplot visualization
# 5. Is there any outliers? Based on the boxplot, no. But, let's calculate it!
# Q1 value => 18.375
m_q1 = quantile(mouse_weight, 0.25)
print(m_q1)
# Q3 value => 20.825
m_q3 = quantile(mouse_weight, 0.75)
print(m_q3)
# IQR value => 2.45
m_iqr = m_q3 - m_q1
print(m_iqr)
# Minimum value to define if the data is outliers or not => 14.7
min_m_value = m_q1 - (1.5 * m_iqr)
print(min_m_value)
# Now, find the minimum value in our data => 15.3. This means, the minimum data in our dataset is not lower than the minimum value defined as an outliers
min_m_data = min(mouse_weight)
print(min_m_data)
# Maximum value to define if the data is outliers or not => 24.5
max_m_value = m_q3 + (1.5 * m_iqr)
print(max_m_value)
# Now, find the maximum value in our data => 22.2. This means, the maximum data in our dataset is not bigger than the maximum value defined as an outliers
max_m_data = max(mouse_weight)
print(max_m_data)
# visualize using histogram
hist(mouse_weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight (Kg)")
# our mu or H0 is 25
m_mu = 25
# Find standard deviation in our data => 2.002915
m_sd = sd(mouse_weight)
t_test_result = t.test(mouse_weight, mu = m_mu)
# Based on above information, we could determined if H0 rejected based on p-value.
# H0 rejected if p-value less than 0.05. Since our p-value is 7.953e-06, it means our
# p-value is less than 0.05. So, our H0 rejected.
p_value = t_test_result$p.value
is_mu_rejected = p_value < 0.05
print(is_mu_rejected)
# Another way to determine if H0 rejected or not is by using Statistic Test and t-score
t_score = t_test_result$statistic
total_data = len(mouse_weight)
total_data = length(mouse_weight)
# Now, let's get critical area, using table
df_table = total_data - 1
t_table_1 = qt(p = 0.025, df = df_table)
print(t_score)
# Now, let's get critical area, using table
df_table = total_data - 1
t_table_1 = qt(p = 0.025, df = df_table)
print(t_table_1)
# t_table_2 => -2.262157
t_table_2 = qt(p = 0.975, df = df_table)
print(t_table_2)
print(t_score)
# t_table_2 => 2.262157
t_table_2 = qt(p = 0.975, df = df_table)
print(t_table_2)
is_t_in_critical_area = (t_score < t_table_1) | (t_score > t_table_2)
print(is_t_in_critical_area)
set.seed(1234)
my_data = data.frame(name = paste0(rep("M_", 10), 1:10), weight = round(rnorm(10, 20, 2), 1))
set.seed(1234)
my_data = data.frame(name = paste0(rep("M_", 10), 1:10), weight = round(rnorm(10, 20, 2), 1))
# save the data for later use
mouse_weight = my_data$weight
total_data = length(mouse_weight)
# find the mean => 19.25
m_mean = mean(mouse_weight)
print(m_mean)
# find the median (Q2) => 18.9
m_median = median(mouse_weight)
print(m_median)
# visualize using boxplot
boxplot(mouse_weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight (Kg)",
horizontal = TRUE)
# Interpretation based on boxplot visualization
# 1. Based on the data, after visualized using boxplot, we can conclude that the ten samples of mouse weight is Negatively Skewed
# 2. This means that most of the mouse weight are distributed to the right
# 3. The median of this data is 18.9 and we got 19.25 for the mean, which is bigger (on the right) than the median. This founding support our statement on point 2
# 4. The line inside the box represents the median, which placed around 19 (the actual median is 18.9) on the boxplot visualization
# 5. Is there any outliers? Based on the boxplot, no. But, let's calculate it!
# Q1 value => 18.375
m_q1 = quantile(mouse_weight, 0.25)
print(m_q1)
# Q3 value => 20.825
m_q3 = quantile(mouse_weight, 0.75)
print(m_q3)
# IQR value => 2.45
m_iqr = m_q3 - m_q1
print(m_iqr)
# Minimum value to define if the data is outliers or not => 14.7
min_m_value = m_q1 - (1.5 * m_iqr)
print(min_m_value)
# Now, find the minimum value in our data => 15.3. This means, the minimum data in our dataset is not lower than the minimum value defined as an outliers
min_m_data = min(mouse_weight)
print(min_m_data)
# Maximum value to define if the data is outliers or not => 24.5
max_m_value = m_q3 + (1.5 * m_iqr)
print(max_m_value)
# Now, find the maximum value in our data => 22.2. This means, the maximum data in our dataset is not bigger than the maximum value defined as an outliers
max_m_data = max(mouse_weight)
print(max_m_data)
# Now, check if there are any outliers
is_has_outliers = (min_m_data < min_m_value) | (max_m_data > max_m_value)
print(is_has_outliers)
# visualize using histogram
hist(mouse_weight,
main = "Weight Distribution of 10 Mouses Sample",
xlab = "Mouse Weight (Kg)")
# our mu or H0 is 25
m_mu = 25
t_test_result = t.test(mouse_weight, mu = m_mu)
print(t_test_result)
# Based on above information, we could determined if H0 rejected based on p-value.
# H0 rejected if p-value less than 0.05. Since our p-value is 7.953e-06, it means our
# p-value is less than 0.05. So, our H0 rejected, which means that the mean of mouse weight from our data
# is not equal to 25
p_value = t_test_result$p.value
is_mu_rejected = p_value < 0.05
print(is_mu_rejected)
# t_score => -9.078319
t_score = t_test_result$statistic
print(t_score)
# Now, let's get critical area, using table
df_table = total_data - 1
# t_table_1 => -2.262157
t_table_1 = qt(p = 0.025, df = df_table)
print(t_table_1)
# t_table_2 => 2.262157
t_table_2 = qt(p = 0.975, df = df_table)
print(t_table_2)
# Now, define if our t_score is in critical area => result is TRUE
is_t_in_critical_area = (t_score < t_table_1) | (t_score > t_table_2)
print(is_t_in_critical_area)
